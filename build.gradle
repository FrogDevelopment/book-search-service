plugins {
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '2.7'
    id 'io.freefair.lombok' version '3.2.0'
    id 'com.google.cloud.tools.jib' version '1.1.0'
    id 'fr.brouillard.oss.gradle.jgitver' version '0.7.0'
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
}

group = 'fr.frogdevelopment'
description = 'book-search-service'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    maven {
        url = "$repoUrl/maven-public/"
    }
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:2.1.3"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE"
        mavenBom "org.junit:junit-bom:5.3.2"
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    annotationProcessor "org.springframework:spring-context-indexer"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    
    implementation 'javax.xml.bind:jaxb-api'
    implementation 'org.glassfish.jaxb:jaxb-runtime'
    implementation 'org.xerial:sqlite-jdbc'

    implementation 'org.apache.commons:commons-lang3'

    implementation 'com.google.code.gson:gson'
//    implementation 'com.google.api-client:google-api-client:1.25.0'
    implementation 'com.google.apis:google-api-services-books:v1-rev106-1.25.0'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.platform:junit-platform-runner'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.23.4'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jgitver {
    mavenLike true
}

springBoot {
    buildInfo()
}

test {
    reports.html.enabled = false

    useJUnitPlatform {
        includeTags 'unitTest', 'integrationTest'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/test.xml")
        csv.enabled false
        html.enabled false
    }
}

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test.xml"
    }
}

project.tasks["sonarqube"].dependsOn "jacocoTestReport"

jib {
    from {
        image = 'adoptopenjdk/openjdk11-openj9:alpine-slim'
    }
    to {
        image = "frogdevelopment/${name}"
    }
    container {
        jvmFlags = ['-Xmx128m', '-noverify']
        ports = ['8080']
        volumes = ["/tmp"]
    }
}

